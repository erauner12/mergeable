/// <reference types="vitest/globals" />
import { afterEach, beforeEach, describe, expect, it, vi } from "vitest";
import { buildRepoPromptLink } from "../../src/lib/repoprompt";
import * as settings from "../../src/lib/settings";
// Assuming mockPull is imported from a shared testing utility like "../testing"
// If it's defined locally, ensure its signature matches the usage.
import { mockPull } from "../testing";

describe("buildRepoPromptLink", () => {
  beforeEach(() => {
    // Spy on getDefaultRoot for each test, will be restored in afterEach
    // No need to call mockResolvedValue here yet, do it in each test
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  it("should build a valid repoprompt URL with default root", async () => {
    vi.spyOn(settings, "getDefaultRoot").mockResolvedValue("/tmp");

    const pull = mockPull({
      repo: "owner/myrepo",
      number: 123,
      title: "My Test PR",
      body: "This is the body.",
      branch: "feature-branch",
      files: ["src/main.ts", "README.md"],
    });

    const link = await buildRepoPromptLink(pull);

    expect(settings.getDefaultRoot).toHaveBeenCalled();
    expect(link).toContain("repoprompt://open/");
    expect(link).toContain(encodeURIComponent("/tmp/myrepo")); // rootPath

    const params = new URLSearchParams(link.substring(link.indexOf("?") + 1));
    expect(params.get("files")).toBe(
      "src/main.ts,README.md",
    );

    const expectedPrompt = [
      "## Sync to PR branch",
      "```bash",
      `cd /tmp/myrepo`,
      "git fetch origin",
      `git checkout feature-branch`,
      "```",
      "",
      `# PR 123: My Test PR`,
      "",
      "This is the body.",
      "",
      `ðŸ”— ${pull.url}`, // Use the URL generated by mockPull
    ].join("\n");
    expect(params.get("prompt")).toBe(expectedPrompt);
  });

  it("should handle pull requests with no body", async () => {
    vi.spyOn(settings, "getDefaultRoot").mockResolvedValue("~/git/work");
    const pull = mockPull({
      repo: "another/repo",
      number: 42,
      title: "Simple PR",
      body: null, // Test null body
      branch: "fix-bug",
      files: ["path/to/file.js"],
    });

    const link = await buildRepoPromptLink(pull);
    const params = new URLSearchParams(link.substring(link.indexOf("?") + 1));
    const decodedPrompt = decodeURIComponent(params.get("prompt") || "");

    expect(decodedPrompt).toContain("# PR 42: Simple PR");
    expect(decodedPrompt).not.toContain("null"); // Ensure null body is handled cleanly (empty string)
    expect(decodedPrompt).toContain(`\n\nðŸ”— ${pull.url}`); // Use the URL generated by mockPull
  });

  it("should handle special characters in paths, titles, and body", async () => {
    vi.spyOn(settings, "getDefaultRoot").mockResolvedValue("/projects");
    const pull = mockPull({
      repo: "user/repo-name with spaces",
      number: 7,
      title: "PR with !@#$%^&*() characters",
      body: "Body with `backticks` and other symbols\nNewline here.",
      branch: "branch/with/slashes",
      files: ["file with spaces.txt", "another&file.py"],
    });

    const link = await buildRepoPromptLink(pull);
    const rootPath = "/projects/repo-name with spaces"; // repoName is extracted
    expect(link).toContain(encodeURIComponent(rootPath));

    const params = new URLSearchParams(link.substring(link.indexOf("?") + 1));
    expect(params.get("files")).toBe(
      "file with spaces.txt,another&file.py",
    );

    const promptFromParams = params.get("prompt") || "";
    expect(promptFromParams).toContain("cd /projects/repo-name with spaces");
    expect(promptFromParams).toContain("git checkout branch/with/slashes");
    expect(promptFromParams).toContain("# PR 7: PR with !@#$%^&*() characters");
    expect(promptFromParams).toContain(
      "Body with `backticks` and other symbols\nNewline here.",
    );
  });
});